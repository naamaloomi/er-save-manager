name: Build & Publish

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Project_Path: er-save-manager.csproj
      Test_Project_Path: your-test-project-path # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      # - name: Setup MSBuild.exe
      #   uses: microsoft/setup-msbuild@v1.0.2

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test

      - name: Restore
        run: dotnet restore ${{ env.Project_Path}}

      - name: Build
        run: dotnet build ${{ env.Project_Path }} -c Release --no-restore

      - name: Publish
        run: dotnet publish ${{ env.Project_Path }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true --no-build

      - name: Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Upload
        uses: csexton/release-asset-action@v2
        with:
          github-token: ${{ env.GITHUB_TOKEN}}
          pattern: bin\Debug\net6.0-windows\win-x64\publish\*.exe
          release-url: ${{ steps.create_release.outputs.upload_url }}

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      # - name: Restore the application
      #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      #   env:
      #     Configuration: ${{ matrix.configuration }}

      # Decode the base 64 encoded pfx and save the Signing_Certificate
      # - name: Decode the pfx
      #   run: |
      #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
      #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
      #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      # Create the app package by building and packaging the Windows Application Packaging project
      # - name: Create the app package
      #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      #   env:
      #     Appx_Bundle: Always
      #     Appx_Bundle_Platforms: x86|x64
      #     Appx_Package_Build_Mode: StoreUpload
      #     Configuration: ${{ matrix.configuration }}

      # Remove the pfx
      # - name: Remove the pfx
      #   run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: MSIX Package
      #     path: ${{ env.Wap_Project_Directory }}\AppPackages
